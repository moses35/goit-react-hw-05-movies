{"version":3,"file":"static/js/247.1bdcb043.chunk.js","mappings":"uMAIMA,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IA0BtB,UAxBa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAaA,OAZAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAW,sCAAD,OAC8BN,EAD9B,sDAGPO,MAAK,SAAAC,GACJJ,GAAQ,OAAII,EAASL,MACtB,IACAM,OAAM,WACLC,QAAQC,IAAI,QACb,GACJ,GAAE,CAACX,KAGF,+BACE,wBACG,CAACG,EAAKS,SACLT,EAAKU,KAAI,SAAAC,GAAI,OAAI,SAAChB,EAAD,CAAwBgB,KAAMA,GAAfA,EAAKC,GAAxB,OAItB,C,sBC7BD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOlB,KAAKa,EAAOC,EAEvC,CACe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GACzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CACAhB,OAAMiB,EACR,GACF,CACF,C,sDC7Be/B,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,WAA0BgC,GAA1B,uFACyBC,MAAMD,GAD/B,YACQ9B,EADR,QAEegC,GAFf,yCAGWhC,EAASiC,QAHpB,uBAKeb,QAAQT,OAAO,IAAIuB,MAAM,UALxC,0GAOA,M,SAP0B,GAAXpC,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C","sources":["components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","servises/fetchQuery.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchQuery from 'servises/fetchQuery';\nimport { lazy } from 'react';\nconst CastItem = lazy(() => import('components/CastItem/CastItem'));\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    fetchQuery(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=76a565cd635ec9567aa9794e25759f83`\n    )\n      .then(response => {\n        setCast([...response.cast]);\n      })\n      .catch(() => {\n        console.log('error');\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {[cast.length] &&\n          cast.map(item => <CastItem key={item.id} item={item} />)}\n      </ul>\n    </>\n  );\n};\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","async function fetchQuery(query) {\n  const response = await fetch(query);\n  if (response.ok) {\n    return response.json();\n  }\n  return await Promise.reject(new Error('error'));\n}\nexport default fetchQuery;\n"],"names":["CastItem","lazy","movieId","useParams","useState","cast","setCast","useEffect","fetchQuery","then","response","catch","console","log","length","map","item","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","query","fetch","ok","json","Error"],"sourceRoot":""}